// Main architecture for a Temu-like desktop e-commerce app using Electron

// --- package.json ---
{
  "name": "desktop-marketplace",
  "version": "1.0.0",
  "description": "Desktop e-commerce marketplace app",
  "main": "main.js",
  "scripts": {
    "start": "electron .",
    "build": "electron-builder"
  },
  "dependencies": {
    "electron": "^27.0.0",
    "electron-store": "^8.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "express": "^4.18.2",
    "sequelize": "^6.32.1",
    "sqlite3": "^5.1.6",
    "axios": "^1.5.0"
  },
  "devDependencies": {
    "electron-builder": "^24.6.3"
  }
}

// --- main.js (Electron main process) ---
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const Store = require('electron-store');
const store = new Store();

// Database setup
const setupDatabase = require('./database/setup');
const productService = require('./services/productService');
const userService = require('./services/userService');
const orderService = require('./services/orderService');

// Initialize database
setupDatabase();

function createWindow() {
  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false
    }
  });

  // Load the index.html file
  mainWindow.loadFile('renderer/index.html');
}

app.whenReady().then(() => {
  createWindow();
  
  // Set up IPC handlers for communication between renderer and main process
  ipcMain.handle('get-products', async (event, filters) => {
    return await productService.getProducts(filters);
  });
  
  ipcMain.handle('get-product-details', async (event, productId) => {
    return await productService.getProductDetails(productId);
  });
  
  ipcMain.handle('user-login', async (event, credentials) => {
    return await userService.login(credentials);
  });
  
  ipcMain.handle('create-order', async (event, orderDetails) => {
    return await orderService.createOrder(orderDetails);
  });
  
  ipcMain.handle('get-user-orders', async (event, userId) => {
    return await orderService.getUserOrders(userId);
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

// --- database/setup.js ---
const { Sequelize } = require('sequelize');
const path = require('path');

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: path.join(__dirname, '../data/marketplace.sqlite'),
  logging: false
});

const models = {
  User: require('../models/user')(sequelize),
  Product: require('../models/product')(sequelize),
  Category: require('../models/category')(sequelize),
  Order: require('../models/order')(sequelize),
  OrderItem: require('../models/orderItem')(sequelize),
  Review: require('../models/review')(sequelize),
  Cart: require('../models/cart')(sequelize),
  CartItem: require('../models/cartItem')(sequelize)
};

// Define relationships
models.User.hasMany(models.Order);
models.Order.belongsTo(models.User);

models.Order.hasMany(models.OrderItem);
models.OrderItem.belongsTo(models.Order);

models.Product.hasMany(models.Review);
models.Review.belongsTo(models.Product);
models.Review.belongsTo(models.User);

models.User.hasOne(models.Cart);
models.Cart.belongsTo(models.User);
models.Cart.hasMany(models.CartItem);
models.CartItem.belongsTo(models.Cart);
models.CartItem.belongsTo(models.Product);

models.Product.belongsTo(models.Category);
models.Category.hasMany(models.Product);

module.exports = async () => {
  try {
    await sequelize.authenticate();
    console.log('Database connection established.');
    
    // Sync models with database
    await sequelize.sync();
    
    return models;
  } catch (error) {
    console.error('Database setup error:', error);
    throw error;
  }
};

// --- models/product.js ---
const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  const Product = sequelize.define('Product', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false
    },
    description: {
      type: DataTypes.TEXT
    },
    price: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false
    },
    originalPrice: {
      type: DataTypes.DECIMAL(10, 2)
    },
    discountPercentage: {
      type: DataTypes.INTEGER
    },
    thumbnailUrl: {
      type: DataTypes.STRING
    },
    imageUrls: {
      type: DataTypes.TEXT,
      get() {
        return JSON.parse(this.getDataValue('imageUrls') || '[]');
      },
      set(value) {
        this.setDataValue('imageUrls', JSON.stringify(value));
      }
    },
    stockQuantity: {
      type: DataTypes.INTEGER,
      defaultValue: 0
    },
    rating: {
      type: DataTypes.FLOAT,
      defaultValue: 0
    },
    reviewCount: {
      type: DataTypes.INTEGER,
      defaultValue: 0
    },
    specifications: {
      type: DataTypes.TEXT,
      get() {
        return JSON.parse(this.getDataValue('specifications') || '{}');
      },
      set(value) {
        this.setDataValue('specifications', JSON.stringify(value));
      }
    },
    isActive: {
      type: DataTypes.BOOLEAN,
      defaultValue: true
    }
  });

  return Product;
};

// --- renderer/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Desktop Marketplace</title>
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <div id="app"></div>
  <script src="./js/app.js"></script>
</body>
</html>

// --- renderer/js/components/App.jsx ---
import React, { useState, useEffect } from 'react';
import { HashRouter as Router, Route, Switch } from 'react-router-dom';
import Header from './Header';
import HomePage from './pages/HomePage';
import ProductPage from './pages/ProductPage';
import CartPage from './pages/CartPage';
import CheckoutPage from './pages/CheckoutPage';
import OrdersPage from './pages/OrdersPage';
import AccountPage from './pages/AccountPage';
import LoginPage from './pages/LoginPage';
import { UserProvider } from '../contexts/UserContext';
import { CartProvider } from '../contexts/CartContext';

const App = () => {
  return (
    <UserProvider>
      <CartProvider>
        <Router>
          <Header />
          <main className="container">
            <Switch>
              <Route exact path="/" component={HomePage} />
              <Route path="/product/:id" component={ProductPage} />
              <Route path="/cart" component={CartPage} />
              <Route path="/checkout" component={CheckoutPage} />
              <Route path="/orders" component={OrdersPage} />
              <Route path="/account" component={AccountPage} />
              <Route path="/login" component={LoginPage} />
            </Switch>
          </main>
        </Router>
      </CartProvider>
    </UserProvider>
  );
};

export default App;
